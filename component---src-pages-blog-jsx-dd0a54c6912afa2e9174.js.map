{"version":3,"sources":["webpack:///./src/components/section/index.jsx","webpack:///./src/components/summary-item/index.jsx","webpack:///./src/pages/404.jsx","webpack:///./src/components/blog-posts/index.jsx","webpack:///./src/pages/blog.jsx"],"names":["classes","Section","title","children","className","SummaryItem","linkContent","imageContent","name","description","link","img","internal","to","href","src","alt","split","map","line","index","array","length","NotFoundPage","BlogPosts","posts","post","key","node","fields","slug","frontmatter","Index","data","allMarkdownRemark","edges","noBlog","metadata","site","siteMetadata"],"mappings":"6FAAA,yBAEMA,EACK,sBADLA,EAEG,qCAFHA,EAIF,oFAJEA,EAKK,gEAcIC,IAXC,SAAH,GAA6B,IAAvBC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SACxB,OACE,yBAAKC,UAAWJ,GACd,yBAAKI,UAAWJ,GACd,wBAAII,UAAWJ,GAAkBE,IAEnC,yBAAKE,UAAWJ,GAAkBG,M,kCChBxC,qCAGMH,EACO,gBADPA,EAEK,OAFLA,EAGE,mCAHFA,EAIS,mCAJTA,EAKC,sCA+CQK,IA5CK,SAAH,GAA4E,IAGvFC,EAQAC,EAXiBC,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YAAY,EAAD,EAAEC,YAAI,OAAQ,MAAEC,WAAG,OAAQ,MAAEC,SAgBnE,OAXEN,OALyE,OAAQ,EAKnE,kBAAC,OAAI,CAACO,GAAIH,GAAOF,GAEjB,uBAAGM,KAAMJ,GAAOF,GAK5BG,IACFJ,EAAe,yBAAKQ,IAAKJ,EAAKK,IAAKR,EAAMJ,UAAWJ,KAIpD,yBAAKI,UAAWJ,GACd,6BAAMO,GAEN,yBAAKH,UAAWJ,GAEd,wBACEI,UAAcJ,EAAY,KACxBU,EAAO,mCAAqC,KAG7CA,EAAOJ,EAAcE,GAEvBC,EAAYQ,MAAM,MAAMC,KAAI,SAACC,EAAMC,EAAOC,GAAK,OAAQD,EAAQ,IAAOC,EAAMC,OAC3E,uBAAGlB,UAAWJ,GACXmB,GACI,oCACP,uBAAGf,UAAWJ,GACXmB,GAEH,qC,kCC/CV,oEAMMnB,EACG,oBADHA,EAEE,YAiBOuB,UAdM,WAAH,OAChB,kBAAC,IAAM,KACL,kBAAC,IAAG,CAACrB,MAAM,cACX,wBAAIE,UAAWJ,GAAe,kBAC9B,2BAAG,2CACwC,IACzC,kBAAC,OAAI,CAACI,UAAWJ,EAAca,GAAG,KAAI,oBAE/B,Q,4FCEEW,EAhBG,SAAH,GAAmB,IAAbC,EAAK,EAALA,MACnB,OACE,kBAAC,IAAO,CAACvB,MAAM,kBACZuB,EAAMP,KAAI,SAACQ,GAAI,OACd,kBAAC,IAAW,CACVC,IAAKD,EAAKE,KAAKC,OAAOC,KACtBtB,KAAMkB,EAAKE,KAAKG,YAAY7B,MAC5BO,YAAaiB,EAAKE,KAAKG,YAAYtB,YACnCC,KAAMgB,EAAKE,KAAKC,OAAOC,KACvBlB,UAAQ,S,gDCYHoB,UAjBD,SAAH,GAAkB,IAAZC,EAAI,EAAJA,KACTR,EAAQQ,EAAKC,kBAAkBC,MAC/BC,GAAUX,IAAUA,EAAMH,OAEhC,OAAKG,GAAUA,EAAMH,OAKnB,kBAAC,IAAM,KACL,kBAAC,IAAG,CAACpB,MAAM,SACX,kBAAC,IAAM,CAACmC,SAAUJ,EAAKK,KAAKC,gBAC1BH,GAAU,kBAAC,EAAS,CAACX,MAAOA,KAPzB,kBAAC,UAAQ","file":"component---src-pages-blog-jsx-dd0a54c6912afa2e9174.js","sourcesContent":["import React from 'react';\n\nconst classes = {\n  wrapper: 'block pt-12 md:flex',\n  title: 'pb-6 md:w-full md:max-w-150 md:p-0',\n  heading:\n    'font-xs font-light tracking-widest text-sm text-gray-600 leading-normal uppercase',\n  content: 'flex-none text-lg text-gray-600 font-light md:flex-1 md:pl-20',\n};\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.title}>\n        <h2 className={classes.heading}>{title}</h2>\n      </div>\n      <div className={classes.content}>{children}</div>\n    </div>\n  );\n};\n\nexport default Section;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nconst classes = {\n  container: 'flex flex-row',\n  wrapper: 'mb-6',\n  name: 'font-semibold text-gray-900 pb-1',\n  description: 'text-md text-gray-600 font-light',\n  img: \"w-12 rounded-full mr-4 padding: p-1\"\n};\n\nconst SummaryItem = ({ name, description, link = false, img = false, internal = false }) => {\n\n  // 1. check nature of link\n  let linkContent;\n  if (internal) {\n    linkContent = <Link to={link}>{name}</Link>;\n  } else {\n    linkContent = <a href={link}>{name}</a>;\n  }\n\n  // 2. check if there is an image\n  let imageContent;\n  if (img) {\n    imageContent = <img src={img} alt={name} className={classes.img}/>\n  }\n\n  return (\n    <div className={classes.container}>\n      <div>{imageContent}</div>\n      \n      <div className={classes.wrapper}>\n        \n        <h3\n          className={`${classes.name} ${\n            link ? 'hover:underline hover:text-black' : ''\n          }`}\n        >\n          {link ? linkContent : name}\n        </h3>\n        {description.split('\\n').map((line, index, array) => ( (index + 1) === array.length ?\n          <p className={classes.description}>\n            {line}\n          </p> : <>\n          <p className={classes.description}>\n            {line}\n          </p>\n          <br></br>\n        </>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SummaryItem;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nconst classes = {\n  title: 'text-lg font-bold',\n  link: 'underline',\n};\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"Not found\" />\n    <h1 className={classes.title}>404: Not Found</h1>\n    <p>\n      You just hit a route that doesn't exist.{' '}\n      <Link className={classes.link} to=\"/\">\n        Return to safety\n      </Link>\n      .\n    </p>\n  </Layout>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\n\nimport Section from '../section';\nimport SummaryItem from '../summary-item';\n\nconst BlogPosts = ({ posts }) => {\n  return (\n    <Section title=\"All Blog Posts\">\n      {posts.map((post) => (\n        <SummaryItem\n          key={post.node.fields.slug}\n          name={post.node.frontmatter.title}\n          description={post.node.frontmatter.description}\n          link={post.node.fields.slug}\n          internal\n        />\n      ))}\n    </Section>\n  );\n};\n\nexport default BlogPosts;\n","import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport BlogPosts from '../components/blog-posts';\nimport Header from '../components/header';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport NotFound from '../pages/404';\n\nconst Index = ({ data }) => {\n  const posts = data.allMarkdownRemark.edges;\n  const noBlog = !posts || !posts.length;\n\n  if (!posts || !posts.length) {\n    return <NotFound />;\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <Header metadata={data.site.siteMetadata} />\n      {!noBlog && <BlogPosts posts={posts} />}\n    </Layout>\n  );\n};\n\nexport default Index;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        name\n        title\n        description\n        about\n        author\n        email\n        github\n        linkedin\n        resume\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}